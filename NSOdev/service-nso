#!/bin/bash

. /utils.sh

cmd=$1
SVCNAME="nso"


### Instance ID ###
#This is a "unique id" that identifies THIS 'service instance'
# it's a "string" … so any unique string...
SERVICE_INSTANCE=$ServiceInstanceName


### CSR INPUTS ###

# This is the "router" that NSO will 'write' configs to for this service instance.
# It's a "leafref" … so the devices "must exist" in NSO device tree… (i.e. c0 or c1)
CAT_DEVICE=$CatDevice

# This is an IP address that gets applied as the WAN interface of the router
# It's a "ipv4-addr/lgth" … so it must be a valid IPv4 format with length (i.e. 10.1.2.3/30)
CAT_WAN_IP=$CatWanIP

# This is an IP address that gets applied as the LAN interface of the router
# It's a "ipv4-addr/lgth" … so it must be a valid IPv4 format with length (i.e. 192.168.1.1/28)
CAT_LAN_IP=$CatLanIP


### ASA INPUTS ###

# This is the "asa" that NSO will 'write' configs to for this service instance.
# It's a "leafref" … so the devices "must exist" in NSO device tree…  (i.e. asa0 (or asa1)
ASA_DEVICE=$AsaDevice

# This is the router that NSO will 'write' configs to for this service instance.
# It's a "ipv4-addr" … so it must be a valid IPv4 format (just addr, i.e. e.g. 192.168.1.20)
ASA_HOST=$AsaHost

# This is the router that NSO will 'write' configs to for this service instance.
# It's a "string" … takes a port number (i.e. 8888)
ASA_PORT=$AsaPort


#createServiceInstance() {
#		print_log "Creating Service Instance"
#		curl -X POST -u admin:admin --header "Content-Type:application/vnd.yang.data+json" \ http://$NSO_ENDPOINT:8080/api/running/services \ -d '{"stackedIfMgr:stackedIfMgr": [{"name": "$SERVICE_INSTANCE", "cat-device": "c0", "asa-device": "asa0",
#"cat-wan-ip": "10.1.1.1/30", "cat-lan-ip": "172.16.16.1/24", "asa-port": "80", "asa-host": "172.16.16.16"}]}'

#}


# RUN EVERYTHING AS ROOT
if [ "$(id -u)" != "0" ]; then
    exec sudo "$0" "$@"
fi


function setup_prereqs() {
  yum install -y python-pip wget
  pip install requests --upgrade
  pip install jinja2
}

function getMembers() {
  for tier in $(echo $CliqrDependencies | tr "," "\n" )
  do
    members=CliqrTier_${tier}_IP
    for ip in $(echo ${!members} | tr "=" "\n" | tr "," "\n")
    do
      memberIPs=$memberIPs"[\"$ip\"],"
    done
    memberIPs=`echo $memberIPs |sed s'/.$//'`
  done
}

function createNSOParams() {

 sed -i "$SERVICE_INSTANCE" params.json
 sed -i "$CAT_DEVICE" params.json
 sed -i "$CAT_WAN_IP" params.json
 sed -i "$CAT_LAN_IP" params.json
 sed -i "$ASA_DEVICE" params.json
 sed -i "$ASA_HOST" params.json
 sed -i "$ASA_PORT" params.json
}

function executionStatus() {
 FILE="FAILURE"
 if [ -f $FILE ];
 then
    status=`cat $FILE`
    print_log "NSO Configuration Failed"
    print_log "$status"
    exit 127
  else
    FILE="SUCCESS"
    status="NSO Successfully Configured"
    print_log "$status"
 fi
}

print_log "Installing pre requisites.."
setup_prereqs
print_log "Retrieving Members.."
getMembers
print_log "Setting the params.."
createNSOParams


case $cmd in
	start)
		print_log "Executing Service.."
		python nso_rest.py -u $NSOUser -p $NSOPassword -c post -t $NSOAddress -var params.json >/tmp/mydebugfile
		executionStatus
		;;
	stop)
		print_log "Deleting Service.."
		python nso_rest.py -u $NSOUser -p $NSOPassword -c delete -t $NSOAddress -var params.json >/tmp/mydebugfile
		;;
	update)
		print_log "Updating Service.."
		python nso_rest.py -u $NSOUser -p $NSOPassword -c put -t $NSOAddress -var params.json >/tmp/mydebugfile
		;;
	*)
		serviceStatus="No Valid Script Argument"
		exit 127
		;;
esac
